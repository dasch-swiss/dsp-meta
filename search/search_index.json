{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DSP Metadata","text":"<p>The dsp-meta repository contains the code of the DSP Metadata Browser, as well all metadata from projects deposited on the DaSCH Service Platform (DSP).</p>"},{"location":"#metadata-in-dsp","title":"Metadata in DSP","text":"<p>Alongside primary data, DSP contains metadata that conceptually falls into three categories:</p> <ul> <li>Firstly, research projects can generate domain specific metadata themselves    within the bounds of the project's data model,    e.g. descriptions of images, editorial annotations, etc.</li> <li>Secondly, the DSP maintains a set of technical metadata,    which is generated by the system, but may be exposed to users to the extent that is useful.</li> <li>Thirdly, the DSP maintains a set of domain agnostic, descriptive metadata that is shared across all projects.    This metadata is always present and openly accessible - independent of the project's access rights -    to ensure findability and reusability of the data.</li> </ul> <p>It is this third category that is of interest here. </p>"},{"location":"#metadata-on-research-data","title":"Metadata on Research Data","text":"<p>This documentation provides an overview of the metadata model used by the DSP to manage and describe research data in the humanities. Our vision is to fully capture the provenance of research data\u2014detailing its origins, how it was created, and how it has been used over time.</p> <p>Humanities research projects are inherently diverse and often span multiple years or even decades. Many of these projects receive funding from various grants and different funders throughout their lifecycle. Additionally, the researchers involved in creating and reusing the data may change over time, reflecting the evolving nature of academic collaboration.</p> <p>Understanding the complex history of research data is crucial for transparency, reproducibility, and future scholarship. The DSP metadata model is designed to accommodate this complexity by meticulously recording the provenance of data. It tracks:</p> <ul> <li>Funding Sources: Documenting the multiple grants and funders that have supported the project over time.</li> <li>Research Personnel: Keeping a record of all researchers who have contributed to or utilized the data, acknowledging   the shifts in team composition.</li> <li>Data Lifecycle: Outlining how the data was created, modified, and reused, providing a comprehensive view of its   evolution.</li> </ul> <p>By capturing this rich contextual information, we aim to provide a robust framework that supports the integrity and longevity of humanities research data. Whether you are a researcher contributing new data or a scholar exploring existing datasets, this documentation will guide you through our metadata practices and help you understand the stories behind the data.</p>"},{"location":"#consuming-metadata","title":"Consuming Metadata","text":"<p>If you are interested in viewing the metadata in human-readable form, you can visit the DSP Metadata Browser.</p> <p>If you are interested in re-using our metadata, you can find extensive documentation here, and the work-in-progress documentation of our v2 data model here.</p> <p>The metadata itself can be found here or requested over the API as described here.</p>"},{"location":"#adding-metadata","title":"Adding Metadata","text":"<p>For adding metadata, please see here.</p>"},{"location":"#code-documentation","title":"Code Documentation","text":"<p>For documentation on the code of the DSP Metadata Browser, please see here.</p>"},{"location":"code/back-end/","title":"Back-End","text":"<p>The back-end of the DSP Metadata Browser is built with Rust using the Axum web framework.</p>"},{"location":"code/back-end/#architecture","title":"Architecture","text":""},{"location":"code/back-end/#core-components","title":"Core Components","text":"<ul> <li>HTTP Server (<code>src/main-server.rs</code>): Entry point using Axum framework with async Tokio runtime</li> <li>API Router (<code>src/api/router.rs</code>): HTTP routing, CORS, and tracing middleware</li> <li>Domain Layer (<code>src/domain/</code>): Business logic and data access<ul> <li><code>metadata_service.rs</code>: Service layer for metadata operations</li> <li><code>metadata_repository.rs</code>: Data access for JSON metadata files</li> <li><code>model/</code>: Domain models and validation</li> </ul> </li> <li>Handlers (<code>src/api/handler/</code>): HTTP request handlers organized by API version</li> </ul>"},{"location":"code/back-end/#technology-stack","title":"Technology Stack","text":"<ul> <li>Framework: Axum - Ergonomic web framework built on Tokio</li> <li>Runtime: Tokio - Asynchronous runtime</li> <li>Serialization: Serde - JSON serialization/deserialization</li> <li>Validation: Valico - JSON schema validation</li> <li>Tracing: tracing + OpenTelemetry - Observability</li> </ul>"},{"location":"code/back-end/#key-features","title":"Key Features","text":""},{"location":"code/back-end/#metadata-management","title":"Metadata Management","text":"<p>The backend serves project metadata stored as JSON files. Each project is identified by a unique shortcode and validated against JSON schemas defined in <code>resources/</code>.</p>"},{"location":"code/back-end/#api-endpoints","title":"API Endpoints","text":"<ul> <li><code>GET /api/v1/projects</code> - List projects with pagination and filtering</li> <li><code>GET /api/v1/projects/{shortcode}</code> - Get specific project by shortcode</li> <li><code>GET /health</code> - Health check endpoint</li> <li><code>GET /version.txt</code> - Current application version</li> </ul>"},{"location":"code/back-end/#configuration","title":"Configuration","text":"<p>The application is configured via environment variables with the <code>DSP_META_</code> prefix:</p> Variable Description Default <code>DSP_META_DATA_DIR</code> Path to metadata JSON files <code>/data</code> <code>DSP_META_PUBLIC_DIR</code> Path to static frontend files <code>/public</code> <code>DSP_META_BASE_URL</code> Base URL for the service <code>https://meta.dasch.swiss</code> <code>DSP_META_LOG_FILTER</code> Log level filter <code>info</code> <code>DSP_META_LOG_FMT</code> Log format (json/compact) <code>compact</code> <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> OpenTelemetry OTLP endpoint (standard env var) Not set"},{"location":"code/back-end/#observability","title":"Observability","text":"<p>The backend implements comprehensive distributed tracing using OpenTelemetry:</p> <ul> <li>Automatic span creation for HTTP requests and instrumented functions</li> <li>W3C TraceContext propagation from reverse proxies and upstream services</li> <li>Optional OTLP export to observability backends like Grafana Tempo</li> </ul> <p>See Observability &amp; Tracing for detailed documentation on testing and configuring distributed tracing.</p>"},{"location":"code/back-end/#development","title":"Development","text":""},{"location":"code/back-end/#building","title":"Building","text":"<pre><code>just build\n</code></pre>"},{"location":"code/back-end/#running-locally","title":"Running Locally","text":"<pre><code>just serve-dev\n</code></pre>"},{"location":"code/back-end/#testing","title":"Testing","text":"<pre><code>just test\n</code></pre>"},{"location":"code/back-end/#code-quality","title":"Code Quality","text":"<pre><code># Format code\njust fmt\n\n# Run linters\njust check\n</code></pre> <p>Info</p> <p>More documentation will be added progressively.</p>"},{"location":"code/front-end/","title":"Front-End","text":"<p>The front-end of the DSP Metadata Browser is built with Svelte.</p> <p>Info</p> <p>More documentation will be added progressively.</p>"},{"location":"code/observability/","title":"Observability and Tracing","text":"<p>DSP-META implements OpenTelemetry distributed tracing to enable monitoring and debugging of requests across the service infrastructure.</p>"},{"location":"code/observability/#overview","title":"Overview","text":"<p>The backend uses OpenTelemetry with the Rust tracing ecosystem to provide:</p> <ul> <li>Distributed Tracing: Continue traces from reverse proxies and upstream services</li> <li>Automatic Span Creation: HTTP requests and instrumented functions automatically create spans</li> <li>W3C TraceContext: Standard-compliant trace propagation via HTTP headers</li> <li>Flexible Export: Optional OTLP exporter for sending traces to observability backends</li> </ul>"},{"location":"code/observability/#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[Reverse Proxy] --&gt;|traceparent header| B[TraceLayer]\n    B --&gt; C[Handler Functions]\n    C --&gt; D[OTLP Exporter]\n    D --&gt; E[Tempo/Jaeger/etc]\n    E --&gt; F[Grafana]</code></pre> <p>The trace flow:</p> <ol> <li>TraceLayer (<code>src/api/router.rs</code>) extracts W3C TraceContext from HTTP headers and creates an    <code>http_request</code> span as a child of the extracted context</li> <li>Handler Functions with <code>#[instrument]</code> create child spans automatically</li> <li>OTLP Exporter (optional) sends spans to observability backends</li> <li>Grafana/Tempo visualize the distributed traces</li> </ol> <p>Automatic Fallback</p> <p>When no <code>traceparent</code> header is present (e.g., local development), new root spans are created automatically.</p>"},{"location":"code/observability/#configuration","title":"Configuration","text":""},{"location":"code/observability/#environment-variables","title":"Environment Variables","text":"Variable Description Default Example <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> OTLP endpoint URL for exporting traces (standard OpenTelemetry env var) Not set (local only) <code>http://localhost:4317</code> <code>DSP_META_LOG_FILTER</code> Log level filter <code>info</code> <code>debug</code> <code>DSP_META_LOG_FMT</code> Log output format <code>compact</code> <code>json</code>"},{"location":"code/observability/#local-development-no-export","title":"Local Development (No Export)","text":"<p>By default, traces are only logged locally:</p> <pre><code>just serve-dev\n</code></pre>"},{"location":"code/observability/#local-development-with-grafana","title":"Local Development with Grafana","text":"<p>Export traces to a local Grafana + Tempo stack:</p> <pre><code>OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 just serve-dev\n</code></pre>"},{"location":"code/observability/#production","title":"Production","text":"<p>In production, configure the OTLP endpoint to send traces to your observability backend:</p> <pre><code>OTEL_EXPORTER_OTLP_ENDPOINT=https://tempo.yourcompany.com:4317\nDSP_META_LOG_FILTER=info\nDSP_META_LOG_FMT=json\n</code></pre>"},{"location":"code/observability/#testing-locally-with-grafana","title":"Testing Locally with Grafana","text":""},{"location":"code/observability/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>The DSP-META repository</li> </ul>"},{"location":"code/observability/#quick-start-recommended","title":"Quick Start (Recommended)","text":"<p>The easiest way to test with observability is using the dedicated <code>just</code> targets:</p> One CommandWith Hot ReloadManual Control <p>Start both the observability stack and the application:</p> <pre><code>just serve-with-observability\n</code></pre> <p>This will: 1. Start Grafana LGTM stack (all-in-one observability container) 2. Start dsp-meta with OTLP exporter enabled 3. Display URLs for accessing the services</p> <p>For development with automatic reloading on code changes:</p> <pre><code>just serve-dev-with-observability\n</code></pre> <p>Start services independently:</p> <pre><code># Start observability stack\njust observability-up\n\n# In another terminal, start your app\njust serve-dev\n\n# When done, stop observability stack\njust observability-down\n</code></pre> <p>After running any of these commands, the observability stack will be available:</p> <pre><code>Observability stack:\n  - Grafana: http://localhost:3001\n  - OTLP gRPC endpoint: http://localhost:4317\n  - OTLP HTTP endpoint: http://localhost:4318\n</code></pre>"},{"location":"code/observability/#manual-setup-alternative","title":"Manual Setup (Alternative)","text":"<p>If you prefer manual control:</p>"},{"location":"code/observability/#step-1-start-observability-stack","title":"Step 1: Start Observability Stack","text":"<p>Start the Grafana LGTM all-in-one observability stack:</p> <pre><code>docker-compose -f docker-compose.observability.yml up -d\n</code></pre> <p>This starts a single container with:</p> <ul> <li>Grafana on port 3001</li> <li>Tempo (traces backend)</li> <li>Loki (logs backend)</li> <li>Mimir/Prometheus (metrics backend)</li> <li>Pyroscope (profiling backend)</li> <li>OTLP gRPC endpoint on port 4317</li> <li>OTLP HTTP endpoint on port 4318</li> </ul>"},{"location":"code/observability/#step-2-start-application-with-exporter","title":"Step 2: Start Application with Exporter","text":"<p>Run the application with the OTLP endpoint configured:</p> Using justUsing cargo <pre><code>OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 \\\nDSP_META_LOG_FILTER=info \\\njust serve-dev\n</code></pre> <pre><code>cargo build\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 \\\n./target/debug/dsp-meta\n</code></pre> <p>You should see the log message: <code>OTLP exporter configured successfully</code></p>"},{"location":"code/observability/#step-3-generate-traces","title":"Step 3: Generate Traces","text":"<p>Generate some traces by making HTTP requests:</p> New Root SpanContinue TraceMultiple Requests <p>Make a request without trace context (creates new root span):</p> <pre><code>curl http://localhost:3000/api/v1/projects/0001\n</code></pre> <p>Make a request with trace context (continues existing trace):</p> <pre><code>curl -H \"traceparent: 00-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-bbbbbbbbbbbbbbbb-01\" \\\n     http://localhost:3000/api/v1/projects/0001\n</code></pre> <p>Generate multiple traces:</p> <pre><code>for i in {1..10}; do\n  curl http://localhost:3000/api/v1/projects/0001\n  sleep 0.5\ndone\n</code></pre>"},{"location":"code/observability/#step-4-view-traces-in-grafana","title":"Step 4: View Traces in Grafana","text":"<ol> <li>Open Grafana at http://localhost:3001</li> <li>Click Explore (compass icon in the left sidebar)</li> <li>Select Tempo from the datasource dropdown</li> <li>Select Search query type</li> <li>Filter by Service Name: <code>dsp-meta</code></li> <li>Click Run query</li> <li>Click any trace to see the full span waterfall visualization</li> </ol>"},{"location":"code/observability/#what-youll-see","title":"What You'll See","text":"<p>In the Grafana trace view:</p> <ul> <li>Trace ID: Unique identifier for the distributed trace</li> <li>Root Span (<code>http_request</code>): Created by TraceLayer for each HTTP request</li> <li>Child Spans: Functions annotated with <code>#[instrument]</code></li> <li>Duration: Time taken by each span</li> <li>Attributes: HTTP method, URI, status code, latency, etc.</li> </ul> <p>Verifying Trace Propagation</p> <p>When you send a request with a <code>traceparent</code> header, the Trace ID in Grafana should match the ID you sent. This confirms that trace context propagation is working correctly.</p>"},{"location":"code/observability/#span-propagation","title":"Span Propagation","text":""},{"location":"code/observability/#w3c-tracecontext-format","title":"W3C TraceContext Format","text":"<p>The <code>traceparent</code> header follows the W3C TraceContext standard:</p> <pre><code>traceparent: 00-{trace-id}-{parent-span-id}-{trace-flags}\n</code></pre> <p>Example:</p> <pre><code>traceparent: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\n</code></pre> <ul> <li><code>00</code>: Version</li> <li><code>0af7651916cd43dd8448eb211c80319c</code>: 32-character hex trace ID</li> <li><code>b7ad6b7169203331</code>: 16-character hex parent span ID</li> <li><code>01</code>: Trace flags (sampled)</li> </ul>"},{"location":"code/observability/#testing-propagation","title":"Testing Propagation","text":"<p>Test that your application correctly continues traces:</p> <pre><code># Generate unique trace and span IDs\nTRACE_ID=$(openssl rand -hex 16)\nSPAN_ID=$(openssl rand -hex 8)\n\n# Send request with that trace context\ncurl -v \\\n  -H \"traceparent: 00-${TRACE_ID}-${SPAN_ID}-01\" \\\n  http://localhost:3000/api/v1/projects/0001\n\n# Search for this trace ID in Grafana\necho \"Search Grafana for trace ID: ${TRACE_ID}\"\n</code></pre> <p>In Grafana, you should find a trace with that exact Trace ID, proving the application continued the distributed trace.</p>"},{"location":"code/observability/#adding-custom-span-attributes","title":"Adding Custom Span Attributes","text":"<p>You can enrich spans with custom attributes in your handler functions:</p> <pre><code>use tracing::{Span, instrument};\n\n#[instrument]\npub async fn my_handler() {\n    let span = Span::current();\n\n    // Add custom attributes\n    span.record(\"user_id\", \"12345\");\n    span.record(\"cache_hit\", true);\n    span.record(\"query_duration_ms\", 42);\n\n    // These attributes will appear in the trace view\n}\n</code></pre> <p>These custom attributes will be visible in Grafana and can be used for filtering and analysis.</p>"},{"location":"code/observability/#troubleshooting","title":"Troubleshooting","text":""},{"location":"code/observability/#no-traces-appearing-in-grafana","title":"No traces appearing in Grafana","text":"Check observability stack is running <pre><code>docker ps | grep otel-lgtm\n</code></pre> <p>You should see a container named <code>otel-lgtm</code> running.</p> Check application is exporting traces <p>Look for this log message when starting the application: <pre><code>Configuring OTLP exporter with endpoint: http://localhost:4317\n</code></pre></p> <p>If not present, verify the <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> environment variable is set.</p> Check LGTM container logs <pre><code>docker logs dsp-meta-otel-lgtm-1\n</code></pre> <p>Look for any errors receiving or processing spans.</p>"},{"location":"code/observability/#connection-errors-to-tempo","title":"Connection errors to Tempo","text":"<p>If you see connection errors, try using Docker's host networking:</p> <pre><code>OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:4317 just serve-dev\n</code></pre>"},{"location":"code/observability/#traces-appear-but-are-incomplete","title":"Traces appear but are incomplete","text":"<p>Ensure all handler functions use the <code>#[instrument]</code> attribute:</p> <pre><code>#[instrument(skip(state))]\npub async fn get_by_shortcode(\n    Path(shortcode): Path&lt;Shortcode&gt;,\n    State(state): State&lt;Arc&lt;AppState&gt;&gt;,\n) -&gt; Result&lt;Response, DspMetaError&gt; {\n    // handler code\n}\n</code></pre> <p>The <code>skip</code> parameter prevents large objects from being logged.</p>"},{"location":"code/observability/#production-considerations","title":"Production Considerations","text":""},{"location":"code/observability/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":"<p>In production, your reverse proxy should inject trace context headers. Example nginx configuration:</p> <pre><code>location / {\n    # Generate trace context if not present\n    set $trace_id $request_id;\n    proxy_set_header traceparent \"00-$trace_id-0000000000000000-01\";\n\n    proxy_pass http://dsp-meta:3000;\n}\n</code></pre>"},{"location":"code/observability/#sampling","title":"Sampling","text":"<p>For high-traffic services, consider configuring sampling to reduce trace volume:</p> <pre><code>// In main-server.rs, configure sampler\nuse opentelemetry_sdk::trace::Sampler;\n\nlet tracer_provider = TracerProvider::builder()\n    .with_config(\n        Config::default()\n            .with_resource(resource)\n            .with_sampler(Sampler::TraceIdRatioBased(0.1)) // Sample 10% of traces\n    )\n    .build();\n</code></pre>"},{"location":"code/observability/#security","title":"Security","text":"<p>Endpoint Security</p> <p>Ensure the OTLP endpoint is secured with authentication when exposing to production networks. The current implementation sends traces without authentication.</p>"},{"location":"code/observability/#available-just-commands","title":"Available Just Commands","text":"<p>The following <code>just</code> commands are available for managing observability:</p> Command Description <code>just observability-up</code> Start Grafana LGTM observability stack <code>just observability-down</code> Stop observability stack <code>just observability-clean</code> Stop stack and remove volumes (deletes all stored data) <code>just serve-with-observability</code> Start observability stack and run dsp-meta <code>just serve-dev-with-observability</code> Start stack and run dsp-meta with hot reload"},{"location":"code/observability/#cleanup","title":"Cleanup","text":"<p>Stop and remove the observability stack:</p> Using justUsing docker-compose <pre><code># Stop containers\njust observability-down\n\n# Remove volumes (deletes stored traces)\njust observability-clean\n</code></pre> <pre><code># Stop containers\ndocker-compose -f docker-compose.observability.yml down\n\n# Remove volumes (deletes stored traces)\ndocker-compose -f docker-compose.observability.yml down -v\n</code></pre>"},{"location":"code/observability/#further-reading","title":"Further Reading","text":"<ul> <li>OpenTelemetry Documentation</li> <li>Rust Tracing Documentation</li> <li>W3C TraceContext Specification</li> <li>Grafana Tempo Documentation</li> </ul>"},{"location":"code/overview/","title":"Overview","text":"<p>The front-end of the DSP Metadata Browser is built with Svelte.</p> <p>The back-end is built with Rust.</p> <p>Info</p> <p>More documentation will be added progressively.</p>"},{"location":"data/adding-metadata/","title":"Adding Metadata","text":"<p>To add metadata to the DSP-META repository, simply add the metadata JSON file to the folder <code>data/json/</code> in the repository.</p> <p>The JSON file must conform to the schema of the metadata:</p> <ul> <li>If the project is marked as \"Ongoing\", use the draft schema, found in <code>resources/schema-metadata-draft.json</code>.   This schema is less strict and allows for incomplete metadata.</li> <li>If the project is marked as \"Finished\", use the final schema, found in <code>resources/schema-metadata-final.json</code>.   This schema is strict and requires all fields to be filled out.</li> </ul> <p>Once the data is added, open a pull request to the repository.  The PR name must conform to the conventional commit format, using the prefix <code>data</code>. E.g. <code>data: Add metadata for project XYZ</code>.</p> <p>To deploy the newly added metadata to the DSP Metadata Browser, a new release must be created and deployed to the server.</p>"},{"location":"data/api/","title":"API Documentation","text":"<p>The pubic API of the DSP Metadata Browser can be accessed under <code>https://meta.dasch.swiss/api</code>.</p>"},{"location":"data/api/#endpoints","title":"Endpoints","text":"<p>Get all projects with paging: <code>GET /v1/projects</code> The optional query params <code>_limit</code> (default value <code>100</code>) and <code>_page</code> (default value <code>1</code>) allow you to define the page. The response contains the <code>x-total-count</code> header with the total amount of projects.</p> <p>Get a project by ID: <code>GET /v1/projects/{shortcode}</code></p> <p>Info</p> <p>In the future, OpenAPI documentation may be provided.</p>"},{"location":"data/v1-datamodel/","title":"Data Model v1","text":"<p>All metadata are modelled according to the model as described in the following.</p> <p>There are two schemas for metadata: <code>draft</code> and <code>final</code>.  Final describes the metadata as they should be in the end,  draft has fewer constraints, in case the metadata is not yet complete.  Any metadata of a project that is marked as <code>Finished</code> must use the final schema, metadata of a projects that are marked as <code>Ongoing</code> may use the draft schema.</p> <p>The two schemas can be found here.</p> <p>The following description is based on the final schema.</p>"},{"location":"data/v1-datamodel/#top-level","title":"Top Level","text":"<p>A set of metadata consists of the following top-level elements:</p> <ul> <li>Project</li> <li>Dataset</li> <li>Person</li> <li>Organization</li> <li>Grant</li> </ul> <p>Each of these elements is an entity identified by a unique identifier.  Other elements can refer to these entities by their identifier.</p> <p>Any other metadata element may itself be a complex object, but it is always part of one of the top-level elements. Such elements do not have an identifier,  but are identified by their position in the hierarchy.</p> Field Type Cardinality <code>$schema</code> string 0-1 <code>project</code> project 1 <code>datasets</code> dataset[] 1-n <code>persons</code> person[] 0-n <code>organizations</code> organization[] 0-n <code>grants</code> grant[] 0-n"},{"location":"data/v1-datamodel/#types","title":"Types","text":""},{"location":"data/v1-datamodel/#entity-types","title":"Entity Types","text":""},{"location":"data/v1-datamodel/#project","title":"Project","text":"Field Type Cardinality Restrictions <code>__type</code> string 1 Literal \"Project\" <code>shortcode</code> string 1 4 char hexadecimal <code>status</code> string 1 Literal \"Ongoing\" or \"Finished\" <code>name</code> string 1 <code>description</code> lang_string 1 <code>startDate</code> date 1 String of format \"YYYY-MM-DD\" <code>teaserText</code> string 1 <code>url</code> url 1 <code>howToCite</code> string 1 <code>datasets</code> id[] 1-n String containing the identifier of a dataset <code>keywords</code> lang_string[] 1-n <code>disciplines</code> lang_string|url[] 1-n <code>temporalCoverage</code> lang_string|url[] 1-n <code>spatialCoverage</code> url[] 1-n <code>funders</code> id[] 1-n String containing the identifier of a person or organization <code>endDate</code> date 0-1 String of format \"YYYY-MM-DD\" <code>secondaryURL</code> url 0-1 <code>dataManagementPlan</code> dmp 0-1 <code>contactPoint</code> id 0-1 String containing the identifier of a person or organization <code>publications</code> publication[] 0-n <code>grants</code> id[] 0-n String containing the identifier of a grant <code>alternativeNames</code> lang_string[] 0-n"},{"location":"data/v1-datamodel/#dataset","title":"Dataset","text":"Field Type Cardinality Restrictions <code>__id</code> string 1 <code>__type</code> string 1 Literal \"Dataset\" <code>title</code> string 1 <code>accessConditions</code> string 1 Literal \"open\", \"restricted\" or \"closed\" <code>howToCite</code> string 1 <code>status</code> string 1 Literal \"In Planning\", \"Ongoing\", \"On hold\", \"Finished\" <code>abstract</code> lang_string|url 1-n <code>typeOfData</code> string[] 1-n Literal \"XML\", \"Text\", \"Image\", \"Video\", \"Audio\" <code>licenses</code> license[] 1-n <code>languages</code> lang_string[] 1-n <code>attributions</code> attribution[] 1-n <code>datePublished</code> date 0-1 <code>dateCreated</code> date 0-1 <code>dateModified</code> date 0-1 <code>distribution</code> url 0-1 <code>alternativeTitles</code> lang_string[] 0-n <code>urls</code> url[] 0-n <code>additional</code> lang_string|url 0-n"},{"location":"data/v1-datamodel/#person","title":"Person","text":"Field Type Cardinality Restrictions <code>__id</code> string 1 <code>__type</code> string 1 Literal 'Person' <code>givenNames</code> string[] 1-n <code>familyNames</code> string[] 1-n <code>jobTitles</code> string[] 0-n <code>affiliations</code> id[] 0-n Organization IDs <code>address</code> address 0-1 <code>email</code> string 0-1 <code>secondaryEmail</code> string 0-1 <code>authorityRefs</code> url[] 0-n References to external authority files"},{"location":"data/v1-datamodel/#organization","title":"Organization","text":"Field Type Cardinality Restrictions <code>__id</code> string 1 <code>__type</code> string 1 Literal 'Organization' <code>name</code> string 1 <code>url</code> url 1 <code>address</code> address 0-1 <code>email</code> string 0-1 <code>alternativeName</code> lang_string 0-1 <code>authorityRefs</code> url[] 0-n References to external authority files"},{"location":"data/v1-datamodel/#grant","title":"Grant","text":"Field Type Cardinality Restrictions <code>__id</code> string 1 <code>__type</code> string 1 Literal 'Grant' <code>funders</code> id[] 1-n Person or Organization IDs <code>number</code> string 0-1 <code>name</code> string 0-1 <code>url</code> url 0-1"},{"location":"data/v1-datamodel/#value-types","title":"Value Types","text":""},{"location":"data/v1-datamodel/#string-with-language-tag-lang_string","title":"String with Language Tag (<code>lang_string</code>)","text":"<p>Object with an ISO language code as key and a string as value.</p> <pre><code>{\n    \"en\": \"Lorem ipsum in English.\",\n    \"de\": \"Lorem ipsum auf Deutsch.\"\n}\n</code></pre>"},{"location":"data/v1-datamodel/#date","title":"Date","text":"<p>String with the format <code>YYYY-MM-DD</code>.</p>"},{"location":"data/v1-datamodel/#url","title":"URL","text":"<p>An object representing a URL.  Depending on the <code>type</code> field, the URL may be a generic URL or a more specific link, like a PID or a reference to a resource in an external authority file.</p> Field Type Cardinality Restrictions <code>__type</code> string 1 Literal 'URL' <code>type</code> string 1 Literal 'URL', 'Geonames', 'Pleiades', 'Skos', 'Periodo', 'Chronontology', 'GND', 'VIAF', 'Grid', 'ORCID', 'Creative Commons', 'DOI', 'ARK' <code>url</code> string 1 <code>text</code> string 0-1"},{"location":"data/v1-datamodel/#data-management-plan-dmp","title":"Data Management Plan (<code>dmp</code>)","text":"Field Type Cardinality Restrictions <code>__type</code> string 1 Literal 'DataManagementPlan' `available boolean 0-1 <code>url</code> url 0-1"},{"location":"data/v1-datamodel/#publication","title":"Publication","text":"Field Type Cardinality Restrictions <code>text</code> string 1 <code>url</code> url 0-1"},{"location":"data/v1-datamodel/#address","title":"Address","text":"Field Type Cardinality Restrictions <code>__type</code> string 1 Literal 'Address' <code>street</code> string 1 <code>postalCode</code> string 1 <code>locality</code> string 1 <code>country</code> string 1 <code>canton</code> string 0-1 <code>additional</code> string 0-1"},{"location":"data/v1-datamodel/#license","title":"License","text":"Field Type Cardinality Restrictions <code>__type</code> string 1 Literal 'License' <code>license</code> url 1 <code>date</code> date 1 <code>details</code> string 0-1"},{"location":"data/v1-datamodel/#attribution","title":"Attribution","text":"Field Type Cardinality Restrictions <code>__type</code> string 1 Literal 'Attribution' <code>agent</code> string 1 <code>roles</code> string 1-n"},{"location":"data/v1-datamodel/#entity-relationship-diagram","title":"Entity-Relationship Diagram","text":"<pre><code>erDiagram\n    project ||--|{ dataset : datasets\n    project ||--|| person : contactPoint\n    project ||--|| organization : contactPoint\n    project ||--|{ person : funders\n    project ||--|{ organization : funders\n    project ||--|{ grant : grants\n    person ||--|{ organization : affiliations\n    grant ||--|{ organization : funders\n    grant ||--|{ person : funders\n\n    project {\n        string __type \"1; Literal 'Project'\"\n        string shortcode \"1\"\n        string status \"1; Literal 'Ongoing' or 'Finished'\"\n        string name \"1\"\n        lang_string description \"1\"\n        date startDate \"1\"\n        string teaserText \"1\"\n        url url \"1\"\n        string howToCite \"1\"\n        id[] datasets \"1-n; Dataset IDs\"\n        lang_string[] keywords \"1-n\"\n        lang_string_or_url[] disciplines \"1-n\"\n        lang_string_or_url[] temporalCoverage \"1-n\"\n        url[] spatialCoverage \"1-n\"\n        id[] funders \"1-n; Person or Organization IDs\"\n        date endDate \"0-1\"\n        url secondaryURL \"0-1\"\n        dmp dataManagementPlan \"0-1\"\n        id contactPoint \"0-1\"\n        publication[] publications \"0-n\"\n        id[] grants \"0-n\"\n        lang_string[] alternativeNames \"0-n\"\n    }\n\n    dataset {\n        string __id \"1\"\n        string __type \"1; Literal 'Dataset'\"\n        string title \"1\"\n        string accessConditions \"1; Literal 'open', 'restricted' or 'closed'\"\n        string howToCite \"1\"\n        string status \"1; Literal 'In Planning', 'Ongoing', 'On hold', 'Finished'\"\n        lang_string_or_url[] abstract \"1-n\"\n        string[] typeOfData \"1-n; Literal 'XML', 'Text', 'Image', 'Video', 'Audio'\"\n        license[] licenses \"1-n\"\n        lang_string[] languages \"1-n\"\n        attribution[] attributions \"1-n\"\n        date datePublished \"0-1\"\n        date dateCreated \"0-1\"\n        date dateModified \"0-1\"\n        url distribution \"0-1\"\n        lang_string[] alternativeTitles \"0-n\"\n        url[] urls \"0-n\"\n        lang_string_or_url[] additional \"0-n\"\n    }\n\n    person {\n        string __id \"1\"\n        string __type \"1; Literal 'Person'\"\n        string[] givenNames \"1-n\"\n        string[] familyNames \"1-n\"\n        string[] jobTitles \"0-n\"\n        id[] affiliations \"0-n; Organization IDs\"\n        address address \"0-1\"\n        string email \"0-1\"\n        string secondaryEmail \"0-1\"\n        url[] authorityRefs \"0-n\"\n    }\n\n    organization {\n        string __id \"1\"\n        string __type \"1; Literal 'Organization'\"\n        string name \"1\"\n        url url \"1\"\n        address address \"0-1\"\n        string email \"0-1\"\n        lang_string alternativeName \"0-1\"\n        url[] authorityRefs \"0-n\"\n    }\n\n    grant {\n        string __id \"1\"\n        string __type \"1; Literal 'Grant'\"\n        id[] funders \"1-n; Person or Organization IDs\"\n        string number \"0-1\"\n        string name \"0-1\"\n        url url \"0-1\"\n    }</code></pre>"},{"location":"data/v1-datamodel/#legacy-docs","title":"Legacy docs","text":"<p>The legacy documentation can be found here. This includes thoughts on mappings to external aggregators  and on RDF representation of the metadata.</p>"},{"location":"data/v2-datamodel/","title":"Data Model v2","text":"<p>Warning</p> <p>This document describes the v2 metadata model, which is not yet implemented. It is a working document for planned upcoming changes from v1 to v2.</p> <p>Note</p> <p>This model is an idealized version of the metadata model. With the current implementation that is entirely separate from the DSP, it is not feasible to implement metadata on the record level. Such a system will be implemented in the archive in the future, but for now, we will keep the metadata on the dataset level.</p> <p>The enhancements to the DSP metadata model are designed to better accommodate the inherent complexity of humanities projects, while still being flexible enough to support simpler project structures.</p> <p>One of the key improvements is the introduction of an additional hierarchical level above the research project, which we refer to as a project cluster. This allows for a more accurate representation of overarching initiatives that span multiple research projects over extended periods of time. Additionally, we have implemented collections to facilitate  more precise referencing and organization of different parts of the data, enabling projects  to retain and represent historical or otherwise relevant groupings of data. Collections  replace the previous dataset concept while providing more flexibility for cross-project  organization and nesting.</p> <p>By expanding our metadata model in this way, we aim to provide a more robust framework that supports the integrity and longevity of humanities research data. This evolution reflects our commitment to capturing the rich, nuanced histories of research projects with greater accuracy and detail.</p> <p>Note</p> <p>For each property, two cardinalities are given:</p> <ul> <li>The archival cardinality, referring to the cardinality of the property  once the entity is finished/finalized for archival.  </li> <li>The in-progress cardinality, referring to the cardinality of the property while the entity is still in progress.</li> </ul> <p>If only one cardinality is given, it applies to both stages.</p>"},{"location":"data/v2-datamodel/#licensing","title":"Licensing","text":"<p>We consider all metadata as public domain. By signing the deposit agreement, projects must consent to that. This is unlike the domain metadata which is part of the project's data and hence can be licensed as the project wishes.</p> <p>Whenever metadata is served to a client, it is served with legal information. Legal information on metadata, just as everywhere else, consists of the license, copyright holder and authorship. The license is always \"public domain\", the copyright holder is always \"DaSCH\"  and the authorship is always the project and DaSCH.</p> <p>Metadata is always publicly available, even if the corresponding project, collection or record is not. This is to ensure that the metadata is always findable and reusable, even if the data itself is not. The only exception to this is the status \"embargoed\", during which the metadata is only available on the project level.</p>"},{"location":"data/v2-datamodel/#model-overview","title":"Model Overview","text":"<p>The metadata model is a hierarchical structure of metadata elements.</p> <pre><code>\nflowchart TD\n    projectCluster[Project Cluster]\n    project[Research Project]\n    record[Record]\n    collection[Collection]\n\n    projectCluster --&gt;|0-n| project\n    projectCluster --&gt;|0-n| collection\n\n    project --&gt;|0-n| collection\n    project --&gt;|1-n| record\n    collection --&gt; |0-n| record\n    collection --&gt; |0-n| collection</code></pre> <ul> <li>A <code>Project Cluster</code> collects <code>Research Projects</code> or nested <code>Project Clusters</code>.   It is typically of institutional nature,   not directly tied to a specific funding grant,   and may be long-lived.   Examples are EKWS/CAS, BEOL or LHTT.</li> <li>A <code>Research Project</code> is the main entity of the metadata model.   It corresponds to a <code>project</code> in the DSP.   It is typically tied to a specific funding grant,   and hence has a limited lifetime of ~3-5 years;   multiple funding rounds and a longer lifetime are possible.   A <code>Research Project</code> is part of 0-n <code>Project Clusters</code> and contains both <code>Collections</code> and <code>Records</code>.   All records in the project must be listed in the project's records array, regardless of collection membership.</li> <li>A <code>Collection</code> is a flexible grouping of <code>Records</code>    that can span multiple projects or be nested within other collections.   Collections serve to enable cross-project data organization and support subsetting and specialized access patterns.   Collections may contain both individual records and other nested collections.</li> <li>A <code>Record</code> is a single entry within a project.   It represents the smallest unit that can meaningfully have an identifier.   It maps to a <code>knora-base:Resource</code> (DSP-API) or an <code>Asset</code> (SIPI/Ingest) in the DSP.   In the case of DSP Resources, the metadata of the record is the existence of the resource itself   as well as information such as the label, access rights, and provenance.   The core data of the resource are the values on that resource.   In the case of assets, the metadata is the existence of the asset itself, as well as access rights.   The core data is the binary information of the asset.   A <code>Record</code> is part of exactly 1 <code>Research Project</code> and may be part of 0-n <code>Collections</code>.</li> </ul> <p>Additionally, there are the entities <code>Person</code> and <code>Organization</code>: <code>Person</code> and <code>Organization</code> are entities that are independent of the <code>Research Project</code> hierarchy, and may be related to various entities within the hierarchy.</p>"},{"location":"data/v2-datamodel/#entity-types","title":"Entity Types","text":""},{"location":"data/v2-datamodel/#project-cluster","title":"Project Cluster","text":"Field Type Card. <code>id</code> internal_id 1 <code>pid</code> string 1 <code>name</code> string 1 <code>projects</code> internal_id[] 0-n <code>projectClusters</code> internal_id[] 0-n <code>collections</code> internal_id[] 0-n <code>description</code> lang_string 0-1 <code>url</code> url 0-1 <code>howToCite</code> string 0-1 <code>alternativeNames</code> lang_string[] 0-n <code>contactPoint</code> internal_id[] 0-n <code>documentationMaterial</code> url[] 0-n <ul> <li><code>id</code>: A unique identifier for the project cluster.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the project cluster.</li> <li><code>name</code>: The name of the project cluster.</li> <li><code>projects</code>: A list of project identifiers that are part of the project cluster.</li> <li><code>projectClusters</code>: A list of project cluster identifiers that are part of the project cluster,   in case of nested project clusters.</li> <li><code>description</code>: The description of the project cluster.</li> <li><code>url</code>: The URL to the web presence of the project cluster.</li> <li><code>howToCite</code>: How to cite the project cluster.   If not provided, we use the standard form <code>&lt;name&gt; (&lt;year&gt;). [Project Cluster]. DaSCH. &lt;ARK&gt;</code>.</li> <li><code>alternativeNames</code>: Alternative names of the project cluster.</li> <li><code>contactPoint</code>: A list of identifiers of persons or organizations responsible for the project cluster.</li> <li><code>documentationMaterial</code>: A list of URLs pointing to documentation material related to the project cluster.</li> </ul> <p>To make the model of this entity as flexible as possible, most of the fields are optional. There is no difference in cardinality between the archival and in-progress stages.</p>"},{"location":"data/v2-datamodel/#project","title":"Project","text":"Field Type Card. WIP Card. <code>id</code> internal_id 1 1 <code>pid</code> string 1 1 <code>shortcode</code> string 1 1 <code>officialName</code> string 1 1 <code>status</code> string 1 1 <code>name</code> string 1 1 <code>shortDescription</code> string 1 0-1 <code>description</code> lang_string 1 1 <code>startDate</code> date 1 0-1 <code>endDate</code> date 1 0-1 <code>dataPublicationYear</code> date 1 0-1 <code>url</code> url 1-2 0-2 <code>howToCite</code> string 1 1 <code>accessRights</code> accessRights 1 1 <code>legalInfo</code> legalInfo[] 1-n 0-n <code>dataManagementPlan</code> string / url 1 1 <code>typeOfData</code> string[] 1-n 0-n <code>dataLanguage</code> lang_string[] 1-n 0-n <code>collections</code> internal_id[] 0-n 0-n <code>records</code> internal_id[] 0-n 0-n <code>keywords</code> lang_string[] 1-n 0-n <code>disciplines</code> lang_string / authorityfileReference[] 1-n 0-n <code>temporalCoverage</code> lang_string / authorityfileReference[] 1-n 0-n <code>spatialCoverage</code> authorityfileReference[] 1-n 0-n <code>attributions</code> attribution[] 1-n 0-n <code>abstract</code> lang_string 0-1 0-1 <code>contactPoint</code> internal_id[] 0-n 0-n <code>publications</code> publication[] 0-n 0-n <code>funding</code> string / grant[] 1-n 0-n <code>alternativeNames</code> lang_string[] 0-n 0-n <code>documentationMaterial</code> url[] 0-n 0-n <code>provenance</code> string 0-1 0-1 <code>additionalMaterial</code> url[] 0-n 0-n <ul> <li><code>id</code>: A unique identifier for the project.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the project.</li> <li><code>shortcode</code>: The project's DSP short code, internal only.   4 characters hexadecimal, upper case.  </li> <li><code>status</code>: The status of the project.   Either \"Ongoing\" or \"Finished\".</li> <li><code>name</code>: The name of the project.</li> <li><code>shortDescription</code>: A short text to be displayed as a teaser.   Maximum length: 200 characters (all including).</li> <li><code>description</code>: The full description of the project.</li> <li><code>startDate</code>: The start date of the project.</li> <li><code>endData</code>: The end date of the project.</li> <li><code>dataPublicationYear</code>: The year when the data is published.   This is normally the year when the project is finished and the data is moved to the archive.   If the project is under embargo, this will be the year when the embargo is lifted.   For projects that were published while in the VRE, a specific publication year may be set.</li> <li><code>url</code>: The URL to the web presence of the project.   The first URL should point to where the data is available,   the second, optional URL may point to the project website.</li> <li><code>howToCite</code>: How to cite the project.   If not provided, we use the standard form <code>&lt;contributors&gt; (&lt;year&gt;). &lt;project name&gt; [Database]. DaSCH. &lt;ARK&gt;</code>.</li> <li><code>accessRights</code>: The access rights of the project.   Literal \"Full Open Access\", \"Open Access with Restrictions\", \"Embargoed Access\", \"Metadata only Access\".   If the project is embargoed, the metadata is only available on the project level.   Access rights define to what extent the project data is available to access in the DPE.</li> <li><code>legalInfo</code>: Legal information about the project.   Calculated from Records. Can not be specified explicitly on the project.</li> <li><code>dataManagementPlan</code>: A data management plan of the project.   String or URL, use \"not accessible\" if not available to us.</li> <li><code>typeOfData</code>: The type of data in the project.   Computed from the records if available and optionally added manually.   Literal \"XML\", \"Text\", \"Image\", \"Video\", \"Audio\".</li> <li><code>dataLanguage</code>: A list of languages contained in the project.   Computed from the records if available and optionally added manually.</li> <li><code>collections</code>: A list of collection identifiers that optionally group project data.</li> <li><code>records</code>: A list of record identifiers that make up the project data.   This is the canonical list of ALL records in the project.</li> <li><code>keywords</code>: A list of keywords describing the project.</li> <li><code>disciplines</code>: A list of disciplines the project is related to.</li> <li><code>temporalCoverage</code>: A list of epoches or time periods the project is related to.</li> <li><code>spatialCoverage</code>: A list of references to spatial entities (Places, Regions, etc.) the project is related to.</li> <li><code>attributions</code>: A list of attributions defining what roles people/organizations have in the project.   Manually entered, as there may be people who don't have authorship, like reviewers, organizers, etc.</li> <li><code>abstract</code>: An abstract of the project.</li> <li><code>contactPoint</code>: A list of identifiers of persons or organizations responsible for the project.</li> <li><code>publications</code>: A list of publications related to the project.</li> <li><code>funding</code>: Either a string (\"No funding\") or a list of grants received by the project.</li> <li><code>alternativeNames</code>: Alternative names of the project.</li> <li><code>documentationMaterial</code>: A list of URLs pointing to documentation material related to the project.</li> <li><code>provenance</code>: the history of the project, if applicable.</li> <li><code>additionalMaterial</code>: A list of URLs related to the project.</li> </ul> <p>Note</p> <p>In the metadata, the project has references to all its records in the <code>records</code> array. This is the canonical list - all records must be listed here, regardless of collection membership.</p>"},{"location":"data/v2-datamodel/#collection","title":"Collection","text":"Field Type Card. WIP-Card <code>id</code> internal_id 1 1 <code>pid</code> string 1 1 <code>name</code> string 1 1 <code>accessRights</code> accessRights 1 1 <code>legalInfo</code> legalInfo[] 1-n 1-n <code>howToCite</code> string 1 1 <code>description</code> lang_string 0-1 0-1 <code>typeOfData</code> string[] 1-n 0-n <code>dateCreated</code> date 1 0-1 <code>dateModified</code> date 0-1 0-1 <code>records</code> internal_id[] 0-n 0-n <code>collections</code> internal_id[] 0-n 0-n <code>languages</code> lang_string[] 1-n 0-n <code>additionalMaterial</code> url[] 0-n 0-n <code>provenance</code> string 0-1 0-1 <code>keywords</code> lang_string[] 0-n 0-n <code>documentationMaterial</code> url[] 0-n 0-n <ul> <li><code>id</code>: A unique identifier for the collection.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the collection.</li> <li><code>name</code>: The name of the collection.</li> <li><code>accessRights</code>: The access rights of the collection.   Literal \"Full Open Access\", \"Open Access with Restrictions\", \"Embargoed Access\", \"Metadata only Access\".   Access rights define to what extent the collection data is available to access in the DPE.</li> <li><code>legalInfo</code>: Legal information about the collection.   Calculated from records/sub-collections. May be added manually.</li> <li><code>howToCite</code>: How to cite the collection.   If not provided, we use the standard form <code>&lt;contributors&gt; (&lt;year&gt;). &lt;collection name&gt; [Collection]. DaSCH. &lt;ARK&gt;</code>.</li> <li><code>description</code>: The description of the collection.</li> <li><code>typeOfData</code>: The type of data in the collection.   Computed from the records if available and optionally added manually.   Literal \"XML\", \"Text\", \"Image\", \"Video\", \"Audio\".</li> <li><code>dateCreated</code>: The date when the collection was created.</li> <li><code>dateModified</code>: The date when the collection was last modified.</li> <li><code>records</code>: A list of record identifiers that make up the collection.</li> <li><code>collections</code>: A list of nested collection identifiers for hierarchical collections.</li> <li><code>languages</code>: A list of languages contained in the collection.   Computed from the records if available and optionally added manually.</li> <li><code>additionalMaterial</code>: A list of URLs related to the collection.</li> <li><code>provenance</code>: The history of the collection, if applicable.</li> <li><code>keywords</code>: Keywords for search purposes.</li> <li><code>documentationMaterial</code>: A list of URLs pointing to documentation material related to the collection.</li> </ul>"},{"location":"data/v2-datamodel/#record","title":"Record","text":"Field Type Card. WIP-Card. <code>id</code> internal_id 1 1 <code>pid</code> string 1 1 <code>label</code> lang_string 1 1 <code>accessRights</code> string 1 1 <code>legalInfo</code> legalInfo 1 1 <code>howToCite</code> string 1 1 <code>publisher</code> string 1 1 <code>source</code> string 0-1 0-1 <code>description</code> lang_string 0-1 0-1 <code>dateCreated</code> date 0-1 0-1 <code>dateModified</code> date 0-1 0-1 <code>datePublished</code> date 0-1 0-1 <code>typeOfData</code> string 0-1 0-1 <code>size</code> string 0-1 0-1 <code>keywords</code> lang_string[] 0-n 0-n <ul> <li><code>id</code>: A unique identifier for the record.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the record.</li> <li><code>label</code>: The label of the record.   For assets, this may be the original file name.   For IIIF URLs, this may be good to have for the case when the URL is no longer available.   In the long run, we would want to have IIIF Manifests, not Image URLs, so that we can extract labels from there.</li> <li><code>accessRights</code>: The access rights of the record.   Literal \"Full Open Access\", \"Open Access with Restrictions\", \"Embargoed Access\", \"Metadata only Access\".   Access rights define to what extent the record data is available to access in the DPE.</li> <li><code>legalInfo</code>: Legal information about the record.</li> <li><code>howToCite</code>: How to cite the record.   If not provided, we use the standard form <code>&lt;label&gt; (&lt;creation year&gt;). [Data Record]. DaSCH. &lt;ARK&gt;</code>.</li> <li><code>publisher</code>: The publisher of the record.   Literal \"DaSCH\". Required for OpenAIRE compliance.</li> <li><code>source</code>: The provenance of the record.   Recommended for openAIRE:   Only use if the record is a digitization of a non-digital source,   in which case this property should identify the original source.</li> <li><code>description</code>: The description of the record.   If the project does not want descriptions to be public domain and always open, it must not use this property,   but instead create a custom property for it.</li> <li><code>dateCreated</code></li> <li><code>dateModified</code></li> <li><code>datePublished</code>: the date when the record was made publicly available.   This is normally the date when the record is moved to the archive.   If the record is under embargo, this will be the date when the embargo is lifted.</li> <li><code>typeOfData</code>: The type of data in the record.   Literal \"XML\", \"Text\", \"Image\", \"Video\", \"Audio\".</li> <li><code>size</code>: The size of the record. openAIRE Size</li> <li><code>keywords</code>: keywords for search purposes.</li> </ul>"},{"location":"data/v2-datamodel/#person","title":"Person","text":"Field Type Card. <code>id</code> internal_id 1 <code>pid</code> string 1 <code>sameAs</code> authorityfileReference[] 0-n <code>givenNames</code> string[] 1-n <code>familyNames</code> string[] 1-n <code>honoraryPrefix</code> string[] 0-n <code>honorarySuffix</code> string[] 0-n <code>affiliations</code> internal_id[] 0-n <code>email</code> string 0-n <code>address</code> address 0-1 <p>Cardinality is the same for both stages.</p> <ul> <li><code>id</code>: A unique identifier for the person.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the person.</li> <li><code>sameAs</code>: References to external authority files. (ORCID, VIAF, GND\u2026)</li> <li><code>givenNames</code>: The given names of the person.</li> <li><code>familyNames</code>: The family names of the person.</li> <li><code>honoraryPrefix</code>: The honorary prefixes of the person, e.g. \"Prof. Dr.\".</li> <li><code>honorarySuffix</code>: The honorary suffixes of the person, e.g. \"PhD\", \"MA\".</li> <li><code>affiliations</code>: A list of identifiers referencing the affiliations of the person to organizations.</li> <li><code>email</code>: The email address of the person.</li> <li><code>address</code>: The post address of the person.   This should not be the personal address, but the specific address of the person at theyr organization.</li> </ul>"},{"location":"data/v2-datamodel/#organization","title":"Organization","text":"Field Type Card. <code>id</code> internal_id 1 <code>pid</code> string 1 <code>sameAs</code> authorityfileReference[] 0-n <code>name</code> string 1 <code>url</code> url 1 <code>address</code> address 0-1 <code>email</code> string 0-1 <code>alternativeName</code> lang_string 0-1 <p>Cardinality is the same for both stages.</p> <ul> <li><code>id</code>: A unique identifier for the organization.   This is the internal ID, which is not exposed to the user and is not persistent.</li> <li><code>pid</code>: A unique persistent identifier (for now ARK URL) for the organization.</li> <li><code>sameAs</code>: References to external authority files. (ROR)</li> <li><code>name</code>: The name of the organization.</li> <li><code>url</code>: The URL of the organization.</li> <li><code>address</code>: The address of the organization.</li> <li><code>email</code>: The email address of the organization.</li> <li><code>alternativeName</code>: Alternative names of the organization.</li> </ul>"},{"location":"data/v2-datamodel/#value-types","title":"Value Types","text":""},{"location":"data/v2-datamodel/#string-with-language-tag-lang_string","title":"String with Language Tag (<code>lang_string</code>)","text":"<p>Object with an ISO language code as key and a string as value.</p> <pre><code>{\n  \"en\": \"Lorem ipsum in English.\",\n  \"de\": \"Lorem ipsum auf Deutsch.\"\n}\n</code></pre> <p>This means that for a single lang_string value, there can be multiple translations.</p>"},{"location":"data/v2-datamodel/#authority-file-reference","title":"Authority File Reference","text":"<p>An object representing a reference to an external authority file.</p> Field Type Card. <code>type</code> string 1 <code>url</code> url 1 <code>text</code> string 0-1 <ul> <li><code>type</code>: The type of the Authority File Reference.   Literal 'Geonames', 'Pleiades', 'Skos', 'Periodo', 'Chronontology', 'GND', 'VIAF', 'Grid', 'ORCID',   'Creative Commons', 'COAR'   This is used to determine the semantics of the URL.</li> <li><code>url</code>: The URL itself.</li> <li><code>text</code>: A human-readable text for display.</li> </ul>"},{"location":"data/v2-datamodel/#pid","title":"PID","text":"<p>A persistent identifier. May be an ARK or a DOI.</p> Field Type Card. <code>url</code> url 1 <code>text</code> string 0-1"},{"location":"data/v2-datamodel/#publication","title":"Publication","text":"Field Type Card. <code>text</code> string 1 <code>pid</code> pid 0-1 <ul> <li><code>text</code>: The text of the publication.</li> <li><code>pid</code>: A URL to the publication, if e.g. a DOI is available.</li> </ul>"},{"location":"data/v2-datamodel/#address","title":"Address","text":"Field Type Card. <code>street</code> string 1 <code>postalCode</code> string 1 <code>locality</code> string 1 <code>country</code> string 1 <code>canton</code> string 0-1 <code>additional</code> string 0-1 <ul> <li><code>street</code>: The street of the address.</li> <li><code>postalCode</code>: The postal code of the address.</li> <li><code>locality</code>: The locality of the address.</li> <li><code>country</code>: The country of the address.</li> <li><code>canton</code>: The canton of the address.</li> <li><code>additional</code>: Additional information about the address, if needed.</li> </ul>"},{"location":"data/v2-datamodel/#grant","title":"Grant","text":"Field Type Cardinality Restrictions <code>funders</code> internal_id[] 1-n Person or Organization IDs <code>number</code> string 0-1 <code>name</code> string 0-1 <code>url</code> url 0-1"},{"location":"data/v2-datamodel/#legal-info","title":"Legal Info","text":"Field Type Card. WIP Card. <code>license</code> license 1 1 <code>copyrightHolder</code> string 1 1 <code>authorship</code> string[] 1-n 1-n"},{"location":"data/v2-datamodel/#license","title":"License","text":"Field Type Card. WIP Card. <code>licenseIdentifier</code> string 1 1 <code>licenseDate</code> date 1 1 <code>licenseURI</code> url 1 1"},{"location":"data/v2-datamodel/#attribution","title":"Attribution","text":"<p>Modelled according to the OpenAIRE guidelines.</p> Field Type Card. <code>contributor</code> internal_id 1 <code>contributorType</code> string 1-n"},{"location":"data/v2-datamodel/#access-rights","title":"Access Rights","text":"Field Type Card. <code>accessRights</code> authorityfileReference::COAR 1 <code>embargoDate</code> date 0-1 <ul> <li><code>accessRights</code>: The access rights of the record.   Literal \"Full Open Access\", \"Open Access with Restrictions\", \"Embargoed Access\", \"Metadata only Access\".</li> <li><code>embargoDate</code>: The date when the embargo ends.</li> </ul>"},{"location":"data/v2-datamodel/#internal-id","title":"Internal ID","text":"<p>An internal ID (<code>internal_id</code>) is a unique identifier for an entity within the system. It is not intentionally exposed to the user, and will be presented as a string.</p>"},{"location":"data/v2-datamodel/#openaire-mapping","title":"OpenAIRE Mapping","text":"<p>Our metadata model includes mappings to the OpenAIRE Guidelines for Data Archives,  which are based on the DataCite Metadata Schema. Currently, only Projects are exposed as OpenAIRE Datasets.</p>"},{"location":"data/v2-datamodel/#openaire-fields","title":"OpenAIRE Fields","text":"<p>The OpenAIRE Guidelines specify 18 fields with the following cardinalities:</p> <ul> <li>M = Mandatory</li> <li>R = Recommended  </li> <li>MA = Mandatory if Applicable</li> <li> <p>O = Optional</p> </li> <li> <p>Identifier (M)</p> </li> <li>Creator (M) </li> <li>Title (M)</li> <li>Publisher (M)</li> <li>PublicationYear (M)</li> <li>Subject (R)</li> <li>Contributor (MA/O)</li> <li>Date (M)</li> <li>Language (R)</li> <li>ResourceType (R)</li> <li>AlternateIdentifier (O)</li> <li>RelatedIdentifier (MA)</li> <li>Size (O)</li> <li>Format (O)</li> <li>Version (O)</li> <li>Rights (MA)</li> <li>Description (MA)</li> <li>GeoLocation (O)</li> </ul>"},{"location":"data/v2-datamodel/#project-openaire-dataset-mapping","title":"Project \u2192 OpenAIRE Dataset Mapping","text":"Project Field OpenAIRE Field Mapping Notes <code>pid</code> Identifier (M) Direct mapping <code>attributions</code> (TBD roles) Creator (M) \u2753 Which roles count as creators? <code>name</code> Title (M) Direct mapping Fixed \"DaSCH\" Publisher (M) Static value TBD date field PublicationYear (M) \u2753 startDate or endDate year? Project-specific <code>keywords</code> Subject (R) Direct mapping <code>attributions</code> (non-creator roles) Contributor (MA/O) Remaining attributions <code>startDate</code>, <code>endDate</code> Date (M) Multiple dates Computed from records Language (R) Aggregated from project records Fixed \"Dataset\" ResourceType (R) Static value for projects <code>shortcode</code> AlternateIdentifier (O) DSP shortcode as alternate ID <code>collections</code> refs RelatedIdentifier (MA) Collection relationships Computed from records Size (O) Aggregated from project records Computed from records Format (O) Aggregated typeOfData from records Not applicable Version (O) Projects don't have versions <code>legalInfo</code> Rights (MA) Direct mapping <code>description</code> Description (MA) Direct mapping <code>spatialCoverage</code> GeoLocation (O) Direct mapping"},{"location":"data/v2-datamodel/#open-questions","title":"Open Questions","text":"<ol> <li>PublicationYear mapping: Projects have startDate/endDate, but OpenAIRE expects PublicationYear.     This may differ project to project - needs case-by-case decision.</li> <li>Creator mapping: Which attribution roles should map to OpenAIRE Creator vs Contributor?     May be more than just \"author\" roles that count as creators.</li> <li>Future consideration: Should Collections also be exposed as OpenAIRE Datasets in addition to Projects?</li> <li>Of the properties we formerly had on Dataset, should we add the following to Project?</li> <li><code>typeOfData</code></li> <li><code>languages</code></li> <li><code>provenance</code></li> <li>something like publication date (which may not be the same as project start or end date)</li> </ol>"},{"location":"data/v2-datamodel/#later","title":"Later","text":"<ul> <li>Provenance:<ul> <li>https://www.w3.org/TR/vocab-dcat-3</li> <li>https://www.w3.org/TR/prov-o/</li> <li>track provenance of dataset etc. through time (even before entered)</li> <li>could also track version history in the archive (predecessor)</li> </ul> </li> <li>Model Person and Organization in a re-useable fashion. This should include making stuff like affiliation time/project bound</li> <li>Alongside keywords, we could also have categories. Where keywords are free text, categories are from a controlled vocabulary.</li> <li>Model attribution in terms of DataCite contribution types.</li> <li>Model TypeOfData in terms of DataCite's resource types.</li> </ul>"},{"location":"data/v2-datamodel/#json-schema","title":"JSON Schema","text":"<p>a draft of the data model as JSON Schema is on github</p>"},{"location":"data/v2-datamodel/#examples","title":"Examples","text":""},{"location":"data/v2-datamodel/#project-cluster_1","title":"Project Cluster","text":"<pre><code>{\n  \"accessRights\": {\n    \"license\": {\n      \"licenseIdentifier\": \"public domain\",\n      \"licenseDate\": \"2023-01-01\",\n      \"licenseURI\": \"https://www.dasch.swiss/licenses/public-domain\"\n    },\n    \"copyrightHolder\": \"DaSCH\",\n    \"authorship\": [\n        \"DaSCH\",\n        \"Project Cluster XYZ\"\n      ]\n  },\n  \"metadata\": {\n    \"id\": \"cluster-0001\",\n    \"pid\": \"https://ark.dasch.swiss/ark:/72163/1/cluster-0001\",\n    \"name\": \"Project Cluster Name\",\n    \"projects\": [\"project-0001\", \"project-0002\"],\n    \"projectClusters\": [\"cluster-0002\"],\n    \"description\": {\n      \"en\": \"Project Cluster Description\",\n      \"de\": \"Projektcluster Beschreibung\"\n    },\n    \"url\": \"https://example.com/project-cluster\",\n    \"howToCite\": \"Project Cluster Name (2025). [Project Cluster]. DaSCH. https://ark.dasch.swiss/ark:/72163/1/cluster-0001\",\n    \"alternativeNames\": [\n      {\n        \"en\": \"Alternative Name\",\n        \"de\": \"Alternativer Name\"\n      }\n    ],\n    \"contactPoint\": [\"person-0001\", \"organization-0001\"],\n    \"documentationMaterial\": [\"https://example.com/documentation\"]\n  }\n}\n</code></pre>"},{"location":"data/v2-datamodel/#project_1","title":"Project","text":"<pre><code>{\n  \"accessRights\": {\n    \"license\": {\n      \"licenseIdentifier\": \"public domain\",\n      \"licenseDate\": \"2023-01-01\",\n      \"licenseURI\": \"https://www.dasch.swiss/licenses/public-domain\"\n    },\n    \"copyrightHolder\": \"DaSCH\",\n    \"authorship\": [\n        \"DaSCH\",\n        \"Project XYZ\"\n      ]\n  },\n  \"metadata\": {\n    \"id\": \"project-0001\",\n    \"pid\": \"https://ark.dasch.swiss/ark:/72163/1/project-0001\",\n    \"shortcode\": \"1234\",\n    \"officialName\": \"Project Official Name\",\n    \"status\": \"Ongoing\",\n    \"name\": \"Project Name\",\n    \"shortDescription\": \"Short description of the project.\",\n    \"description\": {\n      \"en\": \"Project Description\",\n      \"de\": \"Projektbeschreibung\"\n    },\n    \"startDate\": \"2023-01-01\",\n    \"endDate\": \"2028-01-01\",\n    \"url\": [\n      \"https://data.dasch.swiss/projects/project-0001\",\n      \"https://example.com/project-website\"\n    ],\n    \"howToCite\": \"Project Name (2025). [Project]. DaSCH. https://ark.dasch.swiss/ark:/72163/1/project-0001\",\n    \"accessRights\": \"Full Open Access\",\n    \"legalInfo\": [\n      {\n        \"license\": {\n          \"licenseIdentifier\": \"CC-BY-4.0\",\n          \"licenseDate\": \"2023-01-01\",\n          \"licenseURI\": \"https://creativecommons.org/licenses/by/4.0/\"\n        }\n      }\n    ],\n    \"dataManagementPlan\": \"https://example.com/dmp\",\n    \"collections\": [\"collection-0001\", \"collection-0002\"],\n    \"records\": [\"record-0001\", \"record-0002\"],\n    \"keywords\": [\n      {\n        \"en\": \"Keyword 1\",\n        \"de\": \"Stichwort 1\"\n      }\n    ],\n    \"disciplines\": [\n      {\n        \"en\": \"Discipline 1\",\n        \"de\": \"Disziplin 1\"\n      }\n    ],\n    \"temporalCoverage\": [\n      {\n        \"en\": \"Temporal Coverage 1\",\n        \"de\": \"Zeitliche Abdeckung 1\"\n      }\n    ],\n    \"spatialCoverage\": [\n      {\n        \"type\": \"Geonames\",\n        \"url\": \"https://www.geonames.org/1234567\",\n        \"text\": {\n          \"en\": \"Spatial Coverage 1\",\n          \"de\": \"R\u00e4umliche Abdeckung 1\"\n        }\n      }\n    ],\n    \"attributions\": [\n      {\n        \"contributor\": \"person-0001\",\n        \"contributorType\": [\"author\", \"editor\"]\n      }\n    ],\n    \"abstract\": {\n      \"en\": \"Project Abstract\",\n      \"de\": \"Projektzusammenfassung\"\n    },\n    \"contactPoint\": [\"person-0001\", \"organization-0001\"],\n    \"publications\": [\n      {\n        \"text\": \"Publication Title\",\n        \"pid\": \"https://doi.org/10.1234/5678\"\n      }\n    ],\n    \"funding\": [\n      {\n        \"funders\": [\"organization-0001\"],\n        \"number\": \"123456\",\n        \"name\": \"Grant Name\",\n        \"url\": \"https://example.com/grant\"\n      }\n    ],\n    \"alternativeNames\": [\n      {\n        \"en\": \"Alternative Name\",\n        \"de\": \"Alternativer Name\"\n      }\n    ],\n    \"documentationMaterial\": [\"https://example.com/documentation\"]\n  }\n}\n</code></pre>"},{"location":"data/v2-datamodel/#collection_1","title":"Collection","text":"<pre><code>{\n  \"accessRights\": {\n    \"license\": {\n      \"licenseIdentifier\": \"public domain\",\n      \"licenseDate\": \"2023-01-01\",\n      \"licenseURI\": \"https://www.dasch.swiss/licenses/public-domain\"\n    },\n    \"copyrightHolder\": \"DaSCH\",\n    \"authorship\": [\n        \"DaSCH\",\n        \"Project XYZ\"\n      ]\n  },\n  \"metadata\": {\n    \"id\": \"collection-0001\",\n    \"pid\": \"https://ark.dasch.swiss/ark:/72163/1/collection-0001\",\n    \"name\": \"Collection Name\",\n    \"accessRights\": \"Full Open Access\",\n    \"legalInfo\": [\n      {\n        \"license\": {\n          \"licenseIdentifier\": \"CC-BY-4.0\",\n          \"licenseDate\": \"2023-01-01\",\n          \"licenseURI\": \"https://creativecommons.org/licenses/by/4.0/\"\n        }\n      }\n    ],\n    \"howToCite\": \"Collection Name (2025). [Collection]. DaSCH. https://ark.dasch.swiss/ark:/72163/1/collection-0001\",\n    \"description\": {\n      \"en\": \"Collection Description\",\n      \"de\": \"Sammlungsbeschreibung\"\n    },\n    \"typeOfData\": [\"XML\", \"Text\"],\n    \"dateCreated\": \"2023-01-01\",\n    \"dateModified\": \"2023-01-02\",\n    \"records\": [\"record-0001\", \"record-0002\"],\n    \"collections\": [\"collection-0002\"],\n    \"languages\": [\n      {\n        \"en\": \"English\",\n        \"de\": \"Deutsch\"\n      }\n    ],\n    \"additionalMaterial\": [\"https://example.com/additional-material\"],\n    \"provenance\": \"Collection provenance information.\",\n    \"keywords\": [\n      {\n        \"en\": \"Keyword 1\",\n        \"de\": \"Stichwort 1\"\n      }\n    ],\n    \"documentationMaterial\": [\"https://example.com/documentation\"]\n  }\n}\n</code></pre>"}]}